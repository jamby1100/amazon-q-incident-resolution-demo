org: ecvph
app: jam
service: products-api
frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.9
  environment:
    PRODUCTS_TABLE: ${self:service}-${sls:stage}-products
    PRODUCTS_BUCKET: ${self:service}-${sls:stage}-images-20250527
    INVENTORY_SERVICE_URL: inventory-alb-2128711399.ap-southeast-1.elb.amazonaws.com
  tracing:
    apiGateway: true
    lambda: true
  logs:
    restApi:
      accessLogging: true
      executionLogging: true
      level: INFO
      fullExecutionData: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - xray:PutTraceSegments
            - xray:PutTelemetryRecords
          Resource: "*"
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchGetItem
          Resource:
            - !GetAtt ProductsTable.Arn
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
            - s3:ListBucket
          Resource:
            - !GetAtt ProductsImagesBucket.Arn
            - !Join ['', [!GetAtt ProductsImagesBucket.Arn, '/*']]


functions:
  hello:
    handler: handler.hello
    events:
      - httpApi:
          path: /
          method: get
  createProduct:
    handler: handler.create_product
    events:
      - httpApi:
          path: /products
          method: post
  getProducts:
    handler: handler.get_products
    events:
      - httpApi:
          path: /products
          method: get

plugins:
  - serverless-python-requirements

package:
  exclude:
    - venv/**
    - node_modules/**

custom:
  pythonRequirements:
    pythonBin: python3
    
resources:
  Resources:
    ProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.PRODUCTS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        Tags:
          - Key: Name
            Value: ${self:service}-products-table
    ProductsImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.PRODUCTS_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              AllowedOrigins:
                - '*'
              MaxAge: 3000
        Tags:
          - Key: Name
            Value: ${self:service}-images-bucket
    
    # Application Insights Monitoring
    ApplicationInsightsMonitoring:
      Type: AWS::ApplicationInsights::Application
      Properties:
        ResourceGroupName: !Ref ApplicationResourceGroup
        AutoConfigurationEnabled: true
    
    # Resource Group for Application Insights
    ApplicationResourceGroup:
      Type: AWS::ResourceGroups::Group
      Properties:
        Name: ${self:service}-${sls:stage}-resources
        ResourceQuery:
          Type: CLOUDFORMATION_STACK_1_0